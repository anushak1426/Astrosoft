[condition][]In "{chartName}" chart=$chart : PlanetChart( varga == "{chartName}" ) ; 
[condition][]"{planet1}" conjoins "{planet2}"=eval($chart.isPlanetWith( Planet.valueOf( "{planet1}" ) ,  Planet.valueOf( "{planet2}" ) ) );
[consequence][]Predict "{yoga}" with efficacy "{efficacy}"=yogas.addYoga( YogaCombination.valueOf( "{yoga}" )  , "{efficacy}" );
[condition][]"{location}" th of "{planet}" occupied by a benefic=eval($facts.character().isAnyBenefics( planetsAt( $chart, "{planet}" , "{location}" ) ) );
[condition][]"{location}" th of "{planet1}" occupied by planet other than "{planet2}"=eval( hasPlanetBut( planetsAt( $chart, "{planet1}" , "{location}" ) , "{planet2}" ) );
[consequence][]"{location}" th of "{planet}"=planetsAt( $chart, "{planet}" , "{location}" );
[*][]Print "{message}"=System.out.println( "{message}" );
[consequence][]"{location}" th of "{planet}" occupied by a malefic=$facts.character().isAnyMalefics( planetsAt( $chart, "{planet}" , "{location}" ) ) ;
[condition][]"{planet1}" is in kendra from "{planet2}"=eval( isPlanetInKendraTo($chart, "{planet1}", "{planet2}" ) )
[condition][]"{location}" th of "{planet}" occupied by no planet=eval(( planetsAt( $chart, "{planet}" , "{location}" ) .isEmpty()) );
[condition][]"{location}" th of "{planet}" occupied by any of planets "{planets}"=eval( hasAnyOfPlanet( planetsAt( $chart, "{planet}" , "{location}" ) , "{planets}" ) );
[condition][]"{location}" th of "{planet}" occupied by all benefics=eval($facts.character().isAllBenefics( planetsAt( $chart, "{planet}" , "{location}" ) ) );
[condition][]"{location}" th of "{planet}" occupied by a planet=eval( !( removeNodes(planetsAt( $chart, "{planet}" , "{location}" ))  ).isEmpty() );
[condition][]OR=or
[consequence][]count of "{location}" of "{planet}"=planetsAt( $chart, "{planet}" , "{location}" ).size();
[consequence][]if=if
[consequence][]else=else
[condition][]"{planet1}" is in "{location}" th from "{planet2}"=eval( isPlanetInPositionTo($chart, "{planet1}", "{planet2}" , "{location}" ) )
[condition][]"{planet}" is in own house=eval( $chart.isPlanetInOwnHouse( Planet.valueOf("{planet}") ) );
[condition][]"{planet}" is exalted=eval( $chart.isPlanetExalted( Planet.valueOf("{planet}") ) );
[condition][]"{location1}" th lord is in "{location2}" th house=eval( isPlanetAtHouse( $chart, $chart.lordOf("{location1}").name(), "{location2}" ) )
[condition][]"{planet}" is in Ascendant=eval( isPlanetAtHouse( $chart, "{planet}", "1" ) )
[condition][]"{location}" th lord is exalted=eval( $chart.isPlanetExalted( $chart.lordOf("{location}") ) );
[condition][]"{location}" th lord is debilitated=eval( $chart.isPlanetDebilitated( $chart.lordOf("{location}") ) );
[condition][]"{planet}" is in "{location}" th house=eval( isPlanetAtHouse( $chart, "{planet}", "{location}" ) )
[condition][]"{location}" th lord is strongly disposed=eval( $chart.isPlanetStronglyDisposed( $chart.lordOf( "{location}" )  ) )
[condition][]"{location1}" th lord is in mutual kendra to "{location2}" th lord=eval ( isLordKendraToLord ( $chart, "{location1}" , "{location2}" ) );
[condition][]"{location}" th lord is powerful=eval( $facts.isPlanetPowerful( $chart.lordOf( "{location}" )  ) )
[condition][]Person is "{sex}"=eval ( isPersonSex( $facts, "{sex}" ) )
[condition][]Person born during "{value}"=eval ( isBornDuring ( $facts, "{value}" ) )
[condition][]"{planet}" is in "{sign}" sign=eval ( isPlanetInSign( $chart, "{planet}", "{sign}" ) )
[condition][]AND=and
[condition][]"{planet1}" is in kendra to "{location}" th lord=eval( isPlanetInKendraToLord($chart, "{planet1}", "{location}") )
[condition][]"{location}" th lord is in own or exalted house=eval( $chart.isPlanetInOwnOrExaltedHouse( $chart.lordOf("{location}") ) );
[condition][]"{location}" th lord is in kendra or trine=eval( $chart.isPlanetInKendraOrTrine( $chart.lordOf("{location}") ) );
[consequence][]strength of "{location}" th lord=$facts.getPlanetStrength( $chart.lordOf("{location}") );
[consequence][]Predict "{yoga}"=yogas.addYoga( YogaCombination.valueOf( "{yoga}" )  , $percent );
[condition][]"{location1}" th lord is with "{location2}" th lord=eval($chart.isPlanetWith( $chart.lordOf("{location1}")  ,  $chart.lordOf("{location2}") ) );
[condition][]"{planet}" aspected by "{location}" th lord=eval ($chart.isPlanetAspectedBy(Planet.valueOf( "{planet}" ), $chart.lordOf( "{location}") ) );
[condition][]"{location}" house is a movable sign=eval ( $chart.houseOf( "{location}" ).isMovableSign() )
[condition][]"{location}" house is a fixed sign=eval ( $chart.houseOf( "{location}" ).isFixedSign() )
[condition][]"{planet}" is in "{location1}" th from the "{location2}" th lord=eval( isPlanetInPositionTo($chart, "{planet}", $chart.lordOf( "{location2}" ).name() , "{location1}" ) )
[condition][]"{location}" th lord conjoins "{planet}"=eval($chart.isPlanetWith( Planet.valueOf( "{planet}")  ,  $chart.lordOf("{location}") ) );
[condition][]"{location}" th lord is not "{planet}"=eval( ! $chart.lordOf( "{location}" ).name().equals("{planet}") );
[condition][]"{planet}" is MoolaTrikona=eval( $chart.isPlanetInMoolaTrikona( Planet.valueOf("{planet}") ) );
[condition][]"{planet1}" is in trine from "{planet2}"=eval( isPlanetInTrineTo($chart, "{planet1}", "{planet2}" ) )
